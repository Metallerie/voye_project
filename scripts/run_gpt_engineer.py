import subprocess
import time
import shutil
import os
import openai

def run_command(command, cwd=None, stop_on_error=True):
    print(f"üîÑ Ex√©cution : {command} (dans {cwd if cwd else 'le r√©pertoire actuel'})")
    process = subprocess.Popen(command, shell=True, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        print(f"‚ùå Erreur lors de l'ex√©cution : {command}\n{stderr.decode()}")
        if stop_on_error:
            print("üö® Arr√™t du script en raison d'une erreur.")
            exit(1)
    return stdout.decode()

def backup_prompt():
    prompt_file = "/data/voye/prompt.txt"
    backup_dir = "/data/prompt_backups/"
    os.makedirs(backup_dir, exist_ok=True)
    
    if os.path.exists(prompt_file):
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"prompt_{timestamp}.txt")
        shutil.copy(prompt_file, backup_file)
        print(f"üìÇ Sauvegarde du prompt effectu√©e : {backup_file}")
    else:
        print("‚ö†Ô∏è Aucun prompt trouv√© dans /data/voye/ √† sauvegarder.")

def collect_code_from_project():
    project_dir = "/data/voye/"
    code_content = ""
    
    for root, _, files in os.walk(project_dir):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    code_content += f"\n# Fichier : {file_path}\n"
                    code_content += f.read() + "\n"
    
    return code_content

def generate_uml_with_openai():
    print("üß† G√©n√©ration du fichier UML avec OpenAI bas√© sur le code source...")
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    code_content = collect_code_from_project()
    
    prompt = f"""
    Analyse le projet suivant et g√©n√®re un diagramme UML des classes et relations principales.
    Retourne uniquement du code PlantUML, sans explication suppl√©mentaire.
    Voici le code source :
    {code_content}
    """
    
    response = openai.chat.completions.create(
        model="gpt-4-turbo",
        messages=[{"role": "system", "content": "Tu es un assistant qui g√©n√®re des diagrammes UML."},
                  {"role": "user", "content": prompt}]
    )
    
    uml_content = response.choices[0].message.content
    
    uml_file = f"/data/voye/docs/project_structure_{time.strftime('%Y%m%d_%H%M%S')}.puml"
    with open(uml_file, "w", encoding="utf-8") as f:
        f.write(uml_content)
    
    print(f"‚úÖ UML g√©n√©r√© et sauvegard√© : {uml_file}")

def check_and_generate_uml():
    uml_dir = "/data/voye/docs/"
    if not os.path.exists(uml_dir):
        os.makedirs(uml_dir)
    
    uml_files = [f for f in os.listdir(uml_dir) if f.startswith("project_structure_") and f.endswith(".puml")]
    if not uml_files:
        print("üîç Aucun fichier UML trouv√©, g√©n√©ration avec OpenAI...")
        generate_uml_with_openai()
    else:
        print("‚úÖ Un fichier UML existe d√©j√†, poursuite du workflow normal.")

def overwrite_prompt():
    prompt_content = """üìå **Avant de coder, analyse l‚Äôarchitecture actuelle du projet.**  
    
1Ô∏è‚É£ **Lis le dernier fichier UML g√©n√©r√©** (`docs/project_structure_YYYYMMDD_HHMMSS.puml`).  
   - Comprends la structure des classes et des relations.
   - V√©rifie l'organisation du code existant.  
   - Assure-toi que ta modification s‚Äôint√®gre dans cette architecture.  

2Ô∏è‚É£ **Explique-moi bri√®vement ta compr√©hension de l'UML.**  
   - Quels sont les modules et classes principales ?  
   - Comment interagissent-ils ?  

3Ô∏è‚É£ **Applique ensuite les modifications demand√©es.**  
   - Respecte la structure actuelle du projet.  
   - Ne cr√©e pas de nouvelles classes ou m√©thodes si elles existent d√©j√†.  

4Ô∏è‚É£ **Une fois le code modifi√©, g√©n√®re un nouveau fichier UML mis √† jour.**  
   - Utilise OpenAI pour g√©n√©rer un nouvel UML.
   - V√©rifie que le diagramme UML refl√®te bien tes changements.  

5Ô∏è‚É£ **Si les modifications ne conviennent pas, ex√©cute `python scripts/restore_uml.py` pour revenir √† l‚Äôancienne version.**"""
    
    with open("/data/voye/prompt.txt", "w", encoding="utf-8") as f:
        f.write(prompt_content)
    print("‚úÖ Le prompt a √©t√© mis √† jour dans /data/voye/prompt.txt")

def main():
    print("üöÄ Initialisation du workflow GPT-Engineer avec gestion UML...")
    
    # √âtape 1 : Sauvegarde du prompt pr√©c√©dent
    backup_prompt()
    
    # √âtape 2 : V√©rification et g√©n√©ration du premier UML si n√©cessaire
    check_and_generate_uml()
    
    # √âtape 3 : √âcraser l'ancien prompt et cr√©er un nouveau
    overwrite_prompt()
    
    # √âtape 4 : Pause pour permettre la modification du prompt
    input("‚úã Le prompt a √©t√© mis √† jour. Modifiez-le si n√©cessaire, puis appuyez sur Entr√©e pour continuer...")
    
    # √âtape 5 : Lancer GPT-Engineer avec le prompt mis √† jour dans le bon dossier
    print("üõ†Ô∏è Lancement de GPT-Engineer avec le prompt mis √† jour...")
    run_command("poetry run gpt-engineer /data/voye", cwd="/data/voye/gpt-engineer/", stop_on_error=True)
    
    # √âtape 6 : Mise √† jour UML apr√®s modification
    print("üîπ Mise √† jour du fichier UML apr√®s modification...")
    generate_uml_with_openai()
    
    # √âtape 7 : Proposer la restauration si besoin
    choice = input("‚ö†Ô∏è Souhaitez-vous annuler les modifications et restaurer l'ancienne version UML ? (y/n) ")
    if choice.lower() == "y":
        print("üîÑ Restauration en cours...")
        run_command("python scripts/restore_uml.py", stop_on_error=True)
    else:
        print("‚úÖ Modifications valid√©es.")
    
    print("üéØ Workflow termin√© !")

if __name__ == "__main__":
    main()
